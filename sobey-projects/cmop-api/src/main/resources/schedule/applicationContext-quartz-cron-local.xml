<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"
	default-lazy-init="true">

	<description>Quartz的本地Cron式执行任务配置</description>

	<!-- Quartz本地Schduler -->
	<bean id="localQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- Triggers集成 -->
		<property name="triggers">
			<list>
				<ref bean="dnsTrigger" />
				<ref bean="elbTrigger" />
				<ref bean="netappTrigger" />
				<ref bean="vmTrigger" />
				<ref bean="producedTrigger" />
			</list>
		</property>
		<!-- Quartz配置, 本地运行无需单独的quartz.properties文件，在此简单配置即可 -->
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.threadPool.threadCount">5</prop>
			</props>
		</property>
		<!-- 启动时延期2秒开始任务 -->
		<property name="startupDelay" value="2" />
	</bean>

	<!-- Produced -->
	<!-- Cron式Trigger定义 -->
	<bean id="producedTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="producedJobDetail" />
		<!-- 每天12点触发 -->
		<property name="cronExpression" value="0 0 12 * * ?" />
		<!-- [秒] [分] [小时] [日] [月] [周] [年] -->
	</bean>

	<!-- JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
	<bean id="producedJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="scanner" />
		<property name="targetMethod" value="createProduced" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="true" />
	</bean>

	<!-- DNS -->
	<!-- Cron式Trigger定义 -->
	<bean id="dnsTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="dnsJobDetail" />
		<property name="cronExpression" value="0 0 12 * * ?" />
	</bean>

	<!-- JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
	<bean id="dnsJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="scanner" />
		<property name="targetMethod" value="executeSyncDNS" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="true" />
	</bean>


	<!-- ELB -->
	<bean id="elbTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="elbJobDetail" />
		<property name="cronExpression" value="0 0 12 * * ?" />
	</bean>

	<bean id="elbJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="scanner" />
		<property name="targetMethod" value="executeSyncELB" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="true" />
	</bean>

	<!-- VM -->
	<bean id="vmTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="vmJobDetail" />
		<property name="cronExpression" value="0 0 12 * * ?" />
	</bean>

	<bean id="vmJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="scanner" />
		<property name="targetMethod" value="executeSyncVM" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="true" />
	</bean>

	<!-- netapp -->
	<bean id="netappTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="netappJobDetail" />
		<property name="cronExpression" value="0 0 12 * * ?" />
	</bean>

	<bean id="netappJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="scanner" />
		<property name="targetMethod" value="executeSyncVolume" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="true" />
	</bean>

</beans>
